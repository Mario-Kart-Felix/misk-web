{"componentChunkName":"component---node-modules-gatsby-theme-digital-garden-src-templates-note-js","path":"/docs/guides/building-a-tab/5-pure-vs-connected","webpackCompilationHash":"a026fb99ef44366fe0ff","result":{"data":{"note":{"id":"1e57b527-077d-5c0c-9bf3-66ebec559471","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Pure Components vs Connected Containers\"), mdx(\"p\", null, \"You may have noticed two folders where React components live in the \", \"[Project Structure][projectStructure]\", \": \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"components\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"containers\"), \". This guide details the difference between each and when to create a Pure Component or a Connected Container.\"), mdx(\"h2\", null, \"Pure Components\"), mdx(\"p\", null, \"A React component can take props as input.\"), mdx(\"p\", null, \"A Pure Component is only concerned with displaying the passed in props. It is not interacting directly with Redux state or any other side effects. It is only displaying props.\"), mdx(\"p\", null, \"An example Pure Component could look as follows:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-TSX\"\n  }), \"interface OwnProps {\\n  color: string\\n  species: string\\n}\\n\\nexport const DinoTitle = (props: OwnProps) => (\\n  <h1 color={color}>{species}</h1>\\n)\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DinoTitle\"), \" could then be used like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-TSX\"\n  }), \"<DinoTitle color={blue} species={\\\"Dinotyrannus\\\"} />\\n\")), mdx(\"h2\", null, \"Connected Container\"), mdx(\"p\", null, \"A Connected Container is a React component that interacts with Redux. It is called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"connected\"), \" because a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"connect\"), \" function is used to inject the exported component with Redux provided state and props.\"), mdx(\"p\", null, \"This allows for clean definition of components that can have side effects affecting the global state that is managed by Redux.\"), mdx(\"p\", null, \"An example could look as follows:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-TSX\"\n  }), \"\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"BLH\"), \" could be then used like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-TSX\"\n  }), \"\")), mdx(\"h2\", null, \"Why distinguish between Pure Component and Connected Container?\"), mdx(\"p\", null, \"The primary reason is easier testing.\"), mdx(\"p\", null, \"Pure Components have very little test overhead and can be snapshot tested easily with passed in dummy props. An example is shown below\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-TSX\"\n  }), \"import React from \\\"react\\\"\\nimport { cleanup, render } from \\\"@testing-library/react\\\"\\nimport { DinoTitle } from \\\"src/components\\\"\\n\\ndescribe(\\\"DinoTitle renders\\\", () => {\\n  afterEach(cleanup)\\n  it(\\\"DinoTitle can render\\\", () => {\\n    const { asFragment } = render(<DinoTitle color={blue} species={\\\"Dinotyrannus\\\"} />)\\n    expect(asFragment()).toMatchInlineSnapshot(`\\n      <h1 color=\\\"blue\\\">Dinotyrannus</h1>\\n    `)\\n  })\\n})\\n\")), mdx(\"p\", null, \"Connected Containers involve more orchestration to seed an initial Redux store to the desired state and then induce actions on it to confirm that it performs as expected.\"), mdx(\"h2\", null, \"Is this a Pure Component or Connected Container?\"), mdx(\"p\", null, \"A couple questions could help you determine whether what you're building should be a Pure Component or a Connected Container:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Does the component dispatch actions to Redux?\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Network calls?\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Persisting UI state from button clicks?\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Save field input?\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Build a \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"ConnectedContainer\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Is the component focused on displaying passed in data? Build a \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"PureComponent\"))), mdx(\"p\", null, \"A common development pattern is building a large Connected Container initially and then breaking off Pure Components as relevant abstractions become apparent.\"), mdx(\"p\", null, \"[projectStructure]\", \":\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":""},"fileAbsolutePath":"/Users/adrw/Development/cash-services/misk-web/docs/docs/guides/building-a-tab/5-pure-vs-connected.mdx"},"image":{"src":"/static/og-image/5-pure-vs-connected-fe97bee08b.png"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"1e57b527-077d-5c0c-9bf3-66ebec559471","parent":{"name":"5-pure-vs-connected","base":"5-pure-vs-connected.mdx","relativePath":"guides/building-a-tab/5-pure-vs-connected.mdx","sourceInstanceName":"notes"},"title":"5-pure-vs-connected"}}}